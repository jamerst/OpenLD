// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using openld.Data;

namespace openld.Migrations
{
    [DbContext(typeof(OpenLDContext))]
    partial class OpenLDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("openld.Models.Drawing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Drawing");
                });

            modelBuilder.Entity("openld.Models.Fixture", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReleaseData")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Symbol")
                        .HasColumnType("xml");

                    b.Property<string>("TypeId")
                        .HasColumnType("text");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Fixture");
                });

            modelBuilder.Entity("openld.Models.FixtureMode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("Addresses")
                        .HasColumnType("text[]");

                    b.Property<string>("FixtureId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.ToTable("FixtureMode");
                });

            modelBuilder.Entity("openld.Models.FixtureType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FixtureType");
                });

            modelBuilder.Entity("openld.Models.RiggedFixture", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<short>("Address")
                        .HasColumnType("smallint");

                    b.Property<string>("FixtureId")
                        .HasColumnType("text");

                    b.Property<string>("ModeId")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Point>("Position")
                        .HasColumnType("geometry");

                    b.Property<string>("StructureId")
                        .HasColumnType("text");

                    b.Property<short>("Universe")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("ModeId");

                    b.HasIndex("StructureId");

                    b.ToTable("RiggedFixture");
                });

            modelBuilder.Entity("openld.Models.Structure", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Geometry>("Geo")
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("TypeId")
                        .HasColumnType("text");

                    b.Property<string>("ViewId")
                        .HasColumnType("text");

                    b.Property<float>("rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("ViewId");

                    b.ToTable("Structure");
                });

            modelBuilder.Entity("openld.Models.StructureType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StructureType");
                });

            modelBuilder.Entity("openld.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("openld.Models.UserDrawings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DrawingId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrawingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDrawings");
                });

            modelBuilder.Entity("openld.Models.View", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DrawingId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DrawingId");

                    b.ToTable("View");
                });

            modelBuilder.Entity("openld.Models.Drawing", b =>
                {
                    b.HasOne("openld.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("openld.Models.Fixture", b =>
                {
                    b.HasOne("openld.Models.FixtureType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("openld.Models.FixtureMode", b =>
                {
                    b.HasOne("openld.Models.Fixture", "Fixture")
                        .WithMany()
                        .HasForeignKey("FixtureId");
                });

            modelBuilder.Entity("openld.Models.RiggedFixture", b =>
                {
                    b.HasOne("openld.Models.Fixture", "Fixture")
                        .WithMany()
                        .HasForeignKey("FixtureId");

                    b.HasOne("openld.Models.FixtureMode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");

                    b.HasOne("openld.Models.Structure", "Structure")
                        .WithMany("Fixtures")
                        .HasForeignKey("StructureId");
                });

            modelBuilder.Entity("openld.Models.Structure", b =>
                {
                    b.HasOne("openld.Models.StructureType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("openld.Models.View", "View")
                        .WithMany("Structures")
                        .HasForeignKey("ViewId");
                });

            modelBuilder.Entity("openld.Models.UserDrawings", b =>
                {
                    b.HasOne("openld.Models.Drawing", "Drawing")
                        .WithMany()
                        .HasForeignKey("DrawingId");

                    b.HasOne("openld.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("openld.Models.View", b =>
                {
                    b.HasOne("openld.Models.Drawing", "Drawing")
                        .WithMany("Views")
                        .HasForeignKey("DrawingId");
                });
#pragma warning restore 612, 618
        }
    }
}
